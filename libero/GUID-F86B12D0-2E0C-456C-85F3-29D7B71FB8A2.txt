// ----------------------------------------------------------------------------
// Smart High-Level Synthesis Tool Version 2023.1
// Copyright (c) 2015-2023 Microchip Technology Inc. All Rights Reserved.
// For support, please visit https://microchiptech.github.io/fpga-hls-docs/techsupport.html.
// Date: Thu Apr 27 09:35:23 2023
// ----------------------------------------------------------------------------

SmartHLS Summary Report for Project: struct_complete_partitioning.

Table of Contents
  1. RTL Interface
  2. Function and Loop Scheduling Results
  3. Memory Usage
  4. AXI4 Target Interface Address Map
  5. Resource Binding with Adaptive Latency


====== 1. RTL Interface ======

+-------------------------------------------------------------------------------------------------------+
| RTL Interface Generated by SmartHLS                                                                   |
+----------+-----------------+------------------------------------+------------------+------------------+
| C++ Name | Interface Type  | Signal Name                        | Signal Bit-width | Signal Direction |
+----------+-----------------+------------------------------------+------------------+------------------+
|          | Clock & Reset   | clk (positive edge)                | 1                | input            |
|          |                 | reset (synchronous active high)    | 1                | input            |
+----------+-----------------+------------------------------------+------------------+------------------+
|          | Control         | finish                             | 1                | output           |
|          |                 | ready                              | 1                | output           |
|          |                 | return_val                         | 129              | output           |
|          |                 | start                              | 1                | input            |
+----------+-----------------+------------------------------------+------------------+------------------+
| id       | Scalar Argument | id                                 | 6                | input            |
+----------+-----------------+------------------------------------+------------------+------------------+
| acc      | Scalar Memory   | acc_read_data                      | 128              | input            |
+----------+-----------------+------------------------------------+------------------+------------------+
| clients  | Scalar Memory   | clients_a0_acc_checking_read_data  | 64               | input            |
|          |                 | clients_a0_acc_checking_write_data | 64               | output           |
|          |                 | clients_a0_acc_checking_write_en   | 1                | output           |
|          |                 | clients_a0_acc_savings_read_data   | 64               | input            |
|          |                 | clients_a0_acc_savings_write_data  | 64               | output           |
|          |                 | clients_a0_acc_savings_write_en    | 1                | output           |
|          |                 | clients_a0_id_read_data            | 6                | input            |
|          |                 | clients_a1_acc_checking_read_data  | 64               | input            |
|          |                 | clients_a1_acc_checking_write_data | 64               | output           |
|          |                 | clients_a1_acc_checking_write_en   | 1                | output           |
|          |                 | clients_a1_acc_savings_read_data   | 64               | input            |
|          |                 | clients_a1_acc_savings_write_data  | 64               | output           |
|          |                 | clients_a1_acc_savings_write_en    | 1                | output           |
|          |                 | clients_a1_id_read_data            | 6                | input            |
|          |                 | clients_a2_acc_checking_read_data  | 64               | input            |
|          |                 | clients_a2_acc_checking_write_data | 64               | output           |
|          |                 | clients_a2_acc_checking_write_en   | 1                | output           |
|          |                 | clients_a2_acc_savings_read_data   | 64               | input            |
|          |                 | clients_a2_acc_savings_write_data  | 64               | output           |
|          |                 | clients_a2_acc_savings_write_en    | 1                | output           |
|          |                 | clients_a2_id_read_data            | 6                | input            |
|          |                 | clients_a3_acc_checking_read_data  | 64               | input            |
|          |                 | clients_a3_acc_checking_write_data | 64               | output           |
|          |                 | clients_a3_acc_checking_write_en   | 1                | output           |
|          |                 | clients_a3_acc_savings_read_data   | 64               | input            |
|          |                 | clients_a3_acc_savings_write_data  | 64               | output           |
|          |                 | clients_a3_acc_savings_write_en    | 1                | output           |
|          |                 | clients_a3_id_read_data            | 6                | input            |
+----------+-----------------+------------------------------------+------------------+------------------+

The Verilog top-level module ports that are not listed in the above table are unused. Please tie the unused input ports to 0.

====== 2. Function and Loop Scheduling Results ======

+------------------------------------------------------------------------------------------------------------------+
| Function: find                                                                                                   |
+------------------------------------------------+---------------------------------------------+-------------------+
| Loop                                           | Location In Source                          | Iteration Latency |
+------------------------------------------------+---------------------------------------------+-------------------+
| for.loop:struct_complete_partitioning.cpp:31:5 | line 31 of struct_complete_partitioning.cpp | 4                 |
+------------------------------------------------+---------------------------------------------+-------------------+


+------------------+
| Function: update |
+------------------+


Some trip counts could not be found. You can get more accurate scheduling results by providing them via the `bounds` pragma.
More details can be found here: https://microchiptech.github.io/fpga-hls-docs/pragmas.html#bound-loop

====== 3. Memory Usage ======

+----------------+
| Local Memories |
+----------------+
| None           |
+----------------+

+-------------------------+
| Local Constant Memories |
+-------------------------+
| None                    |
+-------------------------+

+-----------------------+
| Shared Local Memories |
+-----------------------+
| None                  |
+-----------------------+

+------------------+
| Aliased Memories |
+------------------+
| None             |
+------------------+

+--------------------------------------------------------------------------------------------------------------------------+
| I/O Memories                                                                                                             |
+-------------------------+-----------------------+----------------------+-------------+------------+-------+--------------+
| Name                    | Accessing Function(s) | Type                 | Size [Bits] | Data Width | Depth | Read Latency |
+-------------------------+-----------------------+----------------------+-------------+------------+-------+--------------+
| acc                     | update                | Register (Read-Only) | 0           | 128        | 0     | 0            |
| clients_a0_acc_checking | update                | Register             | 0           | 64         | 0     | 0            |
| clients_a0_acc_savings  | update                | Register             | 0           | 64         | 0     | 0            |
| clients_a0_id           | find                  | Register (Read-Only) | 0           | 6          | 0     | 0            |
| clients_a1_acc_checking | update                | Register             | 0           | 64         | 0     | 0            |
| clients_a1_acc_savings  | update                | Register             | 0           | 64         | 0     | 0            |
| clients_a1_id           | find                  | Register (Read-Only) | 0           | 6          | 0     | 0            |
| clients_a2_acc_checking | update                | Register             | 0           | 64         | 0     | 0            |
| clients_a2_acc_savings  | update                | Register             | 0           | 64         | 0     | 0            |
| clients_a2_id           | find                  | Register (Read-Only) | 0           | 6          | 0     | 0            |
| clients_a3_acc_checking | update                | Register             | 0           | 64         | 0     | 0            |
| clients_a3_acc_savings  | update                | Register             | 0           | 64         | 0     | 0            |
| clients_a3_id           | find                  | Register (Read-Only) | 0           | 6          | 0     | 0            |
+-------------------------+-----------------------+----------------------+-------------+------------+-------+--------------+


====== 4. AXI4 Target Interface Address Map ======

Compatibility of HLS accelerator with reference SoC features: No.
SoC feature is only supported for PolarFire SoC Icicle Kit, and all accelerator interfaces need to be either axi_target or axi_initiator:
  - This project is not an Icicle_SoC project. See the project's config.tcl.
  - The interfaces of the following argument(s), global variable(s), and/or module control are not axi_target or axi_initiator:
    module control, acc, clients, id.


====== 5. Resource Binding with Adaptive Latency ======

Binding to resource with adaptive latency is disabled.
You can enable this feature by setting config parameter 'ADAPTIVE_LATENCY_BINDING' to 1.


